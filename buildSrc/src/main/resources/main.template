${license}

package ${package_prefix}.advent

import kotlin.system.measureTimeMillis
${runner_imports}
private val RUNNERS = mapOf${runner_map_type}(
${runner_mappings}
)

fun runMultiple(predicate: (String) -> Boolean) =
    RUNNERS.keys.sorted().filter(predicate)
        .sumOf { run(it) }

fun run(key: String): Long {
    println("Running $key")
    val elapsedTime = measureTimeMillis {
        RUNNERS[key]?.invoke()
            ?: throw IllegalArgumentException("No runner found for key $key")
    }
    println("Elapsed time: ${elapsedTime.millisecondsToSeconds()} s\n")
    return elapsedTime
}

fun Long.millisecondsToSeconds() =
    toDouble() / 1000.0

fun timeMultipleRuns(predicate: (String) -> Boolean = { true }) {
    val totalTime = runMultiple(predicate)
    println("Total elapsed time: ${totalTime.millisecondsToSeconds()} s")
}

fun main(args: Array<String>) {
    val year = args.firstOrNull()
    val day = args.getOrNull(1)
    if (year == null) {
        println("Running all days\n")
        timeMultipleRuns()
    } else if (day == null) {
        println("Running year $year\n")
        timeMultipleRuns { it.startsWith(year.toString()) }
    } else {
        val dayNumber = day.toIntOrNull()
            ?: throw IllegalArgumentException("Day must be a valid integer")
        val key = "$year-${String.format("%02d", dayNumber)}"
        run(key)
    }
}